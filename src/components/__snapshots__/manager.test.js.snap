// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Manager /> should render correctly. 1`] = `
<Connect(Manager)
  transition={
    Array [
      "zoom",
      "slide",
    ]
  }
  transitionDuration={500}
>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    dispatch={[Function]}
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [],
        "slide": 0,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={
      Array [
        "zoom",
        "slide",
      ]
    }
    transitionDuration={500}
  >
    <div
      className="spectacle-deck"
      data-radium={true}
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      style={
        Object {
          "backgroundColor": "",
          "height": "100%",
          "left": 0,
          "position": "absolute",
          "top": 0,
          "width": "100%",
        }
      }
    >
      <Controls
        currentSlideIndex={0}
        key=".0"
        onNext={[Function]}
        onPrev={[Function]}
        totalSlides={2}
      >
        <div
          data-radium={true}
        >
          <button
            key=".$next"
            onClick={[Function]}
            style={undefined}
            type="button"
          >
            <svg
              height="32px"
              key="nextIcon"
              style={undefined}
              viewBox="0 0 512 828.586"
              width="32px"
            >
              <path
                d="M97.707,0L0,97.707l316.586,316.586L0,730.88l97.707,97.706L512,414.293L97.707,0z"
              />
            </svg>
          </button>
        </div>
      </Controls>
      <TransitionGroup
        childFactory={[Function]}
        component="div"
        key=".2"
        style={
          Array [
            Object {
              "height": "100%",
              "perspective": 1000,
              "transformStyle": "flat",
              "width": "100%",
            },
          ]
        }
      >
        <div
          data-radium={true}
          style={
            Object {
              "height": "100%",
              "perspective": 1000,
              "transformStyle": "flat",
              "width": "100%",
            }
          }
        >
          <MockSlide
            dispatch={[Function]}
            export={false}
            fragments={undefined}
            hash={0}
            key=".$.$0"
            lastSlideIndex={0}
            print={false}
            slideIndex={0}
            slideReference={
              Array [
                Object {
                  "id": 0,
                  "rootIndex": 0,
                },
                Object {
                  "id": 1,
                  "rootIndex": 1,
                },
              ]
            }
            transition={
              Array [
                "zoom",
                "slide",
              ]
            }
            transitionDuration={500}
          >
            <div>
              Slide Content
            </div>
          </MockSlide>
        </div>
      </TransitionGroup>
      <Progress
        currentSlideIndex={0}
        items={
          Array [
            Object {
              "id": 0,
              "rootIndex": 0,
            },
            Object {
              "id": 1,
              "rootIndex": 1,
            },
          ]
        }
        key=".3"
        type="pacman"
      >
        <div
          data-radium={true}
          style={Object {}}
        >
          <div
            data-radium={true}
          >
            <div
              data-radium={true}
              key=".0"
              style={
                Object {
                  "left": "-15px",
                  "top": "-20px",
                }
              }
            >
              <div
                data-radium={true}
                key=".0"
                style={
                  Object {
                    "animation": "pacmanTopFramesBis 0.12s linear 10 alternate both",
                  }
                }
              />
              <div
                data-radium={true}
                key=".1"
                style={
                  Object {
                    "animation": "pacmanBottomFramesBis 0.12s linear 10 alternate both",
                  }
                }
              />
            </div>
            <div
              data-radium={true}
              key=".1:$presentation-progress-0"
              style={
                Object {
                  "left": "-15px",
                  "opacity": 0,
                  "top": "-20px",
                }
              }
            />
            <div
              data-radium={true}
              key=".1:$presentation-progress-1"
              style={
                Object {
                  "left": "5px",
                  "top": "-20px",
                }
              }
            />
          </div>
        </div>
      </Progress>
      <Fullscreen
        key=".4"
      >
        <svg
          data-radium={true}
          height="30px"
          onClick={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          style={
            Object {
              "bottom": 20,
              "cursor": "pointer",
              "opacity": 0,
              "position": "absolute",
              "right": 20,
              "transition": "300ms opacity ease",
            }
          }
          viewBox="0 0 512 512"
          width="30px"
        >
          <path
            d="M73.143,329.143H0V512h182.857v-73.143H73.143V329.143z M0,182.857h73.143V73.143h109.715V0H0V182.857z M438.857,438.857 H329.143V512H512V329.143h-73.143V438.857z M329.143,0v73.143h109.715v109.715H512V0H329.143z"
          />
        </svg>
      </Fullscreen>
      <Style
        key=".6"
        rules={
          Object {
            ".spectacle-presenter-next .fragment": Object {
              "display": "none !important",
            },
            "body": Array [],
          }
        }
        scopeSelector=""
      >
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body{}.spectacle-presenter-next .fragment{display: none !important;}",
            }
          }
        />
      </Style>
    </div>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render the export configuration when specified. 1`] = `
<Connect(Manager)>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    dispatch={[Function]}
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [
          "export",
        ],
        "slide": 0,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <div
      className="spectacle-deck"
      data-radium={true}
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      style={
        Object {
          "backgroundColor": "",
          "height": "100%",
          "left": 0,
          "position": "absolute",
          "top": 0,
          "width": "100%",
        }
      }
    >
      <Export
        key=".2"
        route={
          Object {
            "params": Array [
              "export",
            ],
            "slide": 0,
          }
        }
        slideReference={
          Array [
            Object {
              "id": 0,
              "rootIndex": 0,
            },
            Object {
              "id": 1,
              "rootIndex": 1,
            },
          ]
        }
        slides={
          Array [
            <MockSlide />,
            <MockSlide />,
          ]
        }
      >
        <Styled(div)>
          <div
            className="css-v2kfba"
          >
            <MockSlide
              export={true}
              key=".$0"
              print={false}
              slideIndex={0}
              transition={Array []}
              transitionDuration={0}
            >
              <div>
                Slide Content
              </div>
            </MockSlide>
            <MockSlide
              export={true}
              key=".$1"
              print={false}
              slideIndex={1}
              transition={Array []}
              transitionDuration={0}
            >
              <div>
                Slide Content
              </div>
            </MockSlide>
          </div>
        </Styled(div)>
      </Export>
      <Style
        key=".6"
        rules={
          Object {
            ".spectacle-presenter-next .fragment": Object {
              "display": "none !important",
            },
            "body": Array [],
          }
        }
        scopeSelector=""
      >
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body{min-width: 1150px;
            min-height: 850px;
            overflow: auto;}.spectacle-presenter-next .fragment{display: none !important;}",
            }
          }
        />
      </Style>
    </div>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render the overview configuration when specified. 1`] = `
<Connect(Manager)>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    dispatch={[Function]}
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [
          "overview",
        ],
        "slide": 0,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <div
      className="spectacle-deck"
      data-radium={true}
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "height": "100%",
          "left": 0,
          "position": "absolute",
          "top": 0,
          "width": "100%",
        }
      }
    >
      <Overview
        key=".2"
        route={
          Object {
            "params": Array [
              "overview",
            ],
            "slide": 0,
          }
        }
        slideIndex={0}
        slideReference={
          Array [
            Object {
              "id": 0,
              "rootIndex": 0,
            },
            Object {
              "id": 1,
              "rootIndex": 1,
            },
          ]
        }
        slides={
          Array [
            <MockSlide />,
            <MockSlide />,
          ]
        }
      >
        <Styled(div)>
          <div
            className="css-gv2ckq"
          >
            <Styled(div)
              index={0}
              key="0"
              onClick={[Function]}
              screen={0}
              slideIndex={0}
            >
              <div
                className="css-13mtebb"
                onClick={[Function]}
              >
                <MockSlide
                  appearOff={true}
                  export={false}
                  key="0"
                  print={false}
                  slideIndex={0}
                  transition={Array []}
                  transitionDuration={0}
                >
                  <div>
                    Slide Content
                  </div>
                </MockSlide>
              </div>
            </Styled(div)>
            <Styled(div)
              index={1}
              key="1"
              onClick={[Function]}
              screen={0}
              slideIndex={0}
            >
              <div
                className="css-13d6elb"
                onClick={[Function]}
              >
                <MockSlide
                  appearOff={true}
                  export={false}
                  key="1"
                  print={false}
                  slideIndex={1}
                  transition={Array []}
                  transitionDuration={0}
                >
                  <div>
                    Slide Content
                  </div>
                </MockSlide>
              </div>
            </Styled(div)>
          </div>
        </Styled(div)>
      </Overview>
      <Fullscreen
        key=".4"
      >
        <svg
          data-radium={true}
          height="30px"
          onClick={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          style={
            Object {
              "bottom": 20,
              "cursor": "pointer",
              "opacity": 0,
              "position": "absolute",
              "right": 20,
              "transition": "300ms opacity ease",
            }
          }
          viewBox="0 0 512 512"
          width="30px"
        >
          <path
            d="M73.143,329.143H0V512h182.857v-73.143H73.143V329.143z M0,182.857h73.143V73.143h109.715V0H0V182.857z M438.857,438.857 H329.143V512H512V329.143h-73.143V438.857z M329.143,0v73.143h109.715v109.715H512V0H329.143z"
          />
        </svg>
      </Fullscreen>
      <Style
        key=".6"
        rules={
          Object {
            ".spectacle-presenter-next .fragment": Object {
              "display": "none !important",
            },
            "body": Array [],
          }
        }
        scopeSelector=""
      >
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body{}.spectacle-presenter-next .fragment{display: none !important;}",
            }
          }
        />
      </Style>
    </div>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render with slideset slides 1`] = `
<Connect(Manager)>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    dispatch={[Function]}
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [],
        "slide": 1,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <div
      className="spectacle-deck"
      data-radium={true}
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      style={
        Object {
          "backgroundColor": "",
          "height": "100%",
          "left": 0,
          "position": "absolute",
          "top": 0,
          "width": "100%",
        }
      }
    >
      <Controls
        currentSlideIndex={1}
        key=".0"
        onNext={[Function]}
        onPrev={[Function]}
        totalSlides={3}
      >
        <div
          data-radium={true}
        >
          <button
            key=".$prev"
            onClick={[Function]}
            style={undefined}
            type="button"
          >
            <svg
              height="32px"
              key="prevIcon"
              style={undefined}
              viewBox="0 0 512 828.586"
              width="32px"
            >
              <path
                d="M512,97.707L414.293,0L0,414.293l414.293,414.293L512,730.88L195.414,414.293L512,97.707z"
              />
            </svg>
          </button>
          <button
            key=".$next"
            onClick={[Function]}
            style={undefined}
            type="button"
          >
            <svg
              height="32px"
              key="nextIcon"
              style={undefined}
              viewBox="0 0 512 828.586"
              width="32px"
            >
              <path
                d="M97.707,0L0,97.707l316.586,316.586L0,730.88l97.707,97.706L512,414.293L97.707,0z"
              />
            </svg>
          </button>
        </div>
      </Controls>
      <TransitionGroup
        childFactory={[Function]}
        component="div"
        key=".2"
        style={
          Array [
            Object {
              "height": "100%",
              "perspective": 1000,
              "transformStyle": "flat",
              "width": "100%",
            },
          ]
        }
      >
        <div
          data-radium={true}
          style={
            Object {
              "height": "100%",
              "perspective": 1000,
              "transformStyle": "flat",
              "width": "100%",
            }
          }
        >
          <MockSlide
            dispatch={[Function]}
            export={false}
            fragments={undefined}
            hash={1}
            key=".$.$1"
            lastSlideIndex={1}
            print={false}
            slideIndex={1}
            slideReference={
              Array [
                Object {
                  "id": 0,
                  "rootIndex": 0,
                },
                Object {
                  "id": 1,
                  "rootIndex": 1,
                  "setIndex": 0,
                },
                Object {
                  "id": 2,
                  "rootIndex": 1,
                  "setIndex": 1,
                },
              ]
            }
            transition={Array []}
            transitionDuration={500}
          >
            <div>
              Slide Content
            </div>
          </MockSlide>
        </div>
      </TransitionGroup>
      <Progress
        currentSlideIndex={1}
        items={
          Array [
            Object {
              "id": 0,
              "rootIndex": 0,
            },
            Object {
              "id": 1,
              "rootIndex": 1,
              "setIndex": 0,
            },
            Object {
              "id": 2,
              "rootIndex": 1,
              "setIndex": 1,
            },
          ]
        }
        key=".3"
        type="pacman"
      >
        <div
          data-radium={true}
          style={Object {}}
        >
          <div
            data-radium={true}
          >
            <div
              data-radium={true}
              key=".0"
              style={
                Object {
                  "left": "-5px",
                  "top": "-20px",
                }
              }
            >
              <div
                data-radium={true}
                key=".0"
                style={
                  Object {
                    "animation": "pacmanTopFrames 0.12s linear 10 alternate both",
                  }
                }
              />
              <div
                data-radium={true}
                key=".1"
                style={
                  Object {
                    "animation": "pacmanBottomFrames 0.12s linear 10 alternate both",
                  }
                }
              />
            </div>
            <div
              data-radium={true}
              key=".1:$presentation-progress-0"
              style={
                Object {
                  "left": "-25px",
                  "opacity": 0,
                  "top": "-20px",
                }
              }
            />
            <div
              data-radium={true}
              key=".1:$presentation-progress-1"
              style={
                Object {
                  "left": "-5px",
                  "opacity": 0,
                  "top": "-20px",
                }
              }
            />
            <div
              data-radium={true}
              key=".1:$presentation-progress-2"
              style={
                Object {
                  "left": "15px",
                  "top": "-20px",
                }
              }
            />
          </div>
        </div>
      </Progress>
      <Fullscreen
        key=".4"
      >
        <svg
          data-radium={true}
          height="30px"
          onClick={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          style={
            Object {
              "bottom": 20,
              "cursor": "pointer",
              "opacity": 0,
              "position": "absolute",
              "right": 20,
              "transition": "300ms opacity ease",
            }
          }
          viewBox="0 0 512 512"
          width="30px"
        >
          <path
            d="M73.143,329.143H0V512h182.857v-73.143H73.143V329.143z M0,182.857h73.143V73.143h109.715V0H0V182.857z M438.857,438.857 H329.143V512H512V329.143h-73.143V438.857z M329.143,0v73.143h109.715v109.715H512V0H329.143z"
          />
        </svg>
      </Fullscreen>
      <Style
        key=".6"
        rules={
          Object {
            ".spectacle-presenter-next .fragment": Object {
              "display": "none !important",
            },
            "body": Array [],
          }
        }
        scopeSelector=""
      >
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body{}.spectacle-presenter-next .fragment{display: none !important;}",
            }
          }
        />
      </Style>
    </div>
  </Manager>
</Connect(Manager)>
`;
