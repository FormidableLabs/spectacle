// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Manager /> should render correctly. 1`] = `
<Connect(Manager)
  transition={
    Array [
      "zoom",
      "slide",
    ]
  }
  transitionDuration={500}
>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    autoplayLoop={true}
    autoplayOnStart={true}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    disableKeyboardControls={false}
    disableTouchControls={false}
    dispatch={[Function]}
    fragment={
      Object {
        "fragments": Array [],
      }
    }
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [],
        "slide": 0,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={
      Array [
        "zoom",
        "slide",
      ]
    }
    transitionDuration={500}
  >
    <Styled(div)
      className="spectacle-deck"
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      route={
        Object {
          "params": Array [],
          "slide": 0,
        }
      }
    >
      <div
        className="spectacle-deck css-1w702dy eaa55an0"
        onClick={[Function]}
        onTouchCancel={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
      >
        <Controls
          controlColor={null}
          currentSlideIndex={0}
          onNext={[Function]}
          onPrev={[Function]}
          totalSlides={2}
        >
          <div>
            <button
              aria-label="Next slide"
              key="next"
              onClick={[Function]}
              type="button"
            >
              <svg
                focusable="false"
                height="32px"
                key="nextIcon"
                role="presentation"
                viewBox="0 0 512 828.586"
                width="32px"
              >
                <path
                  d="M97.707,0L0,97.707l316.586,316.586L0,730.88l97.707,97.706L512,414.293L97.707,0z"
                />
              </svg>
            </button>
          </div>
        </Controls>
        <Styled(TransitionGroup)
          component="div"
        >
          <TransitionGroup
            childFactory={[Function]}
            className="css-r8ywg3 eaa55an1"
            component="div"
          >
            <div
              className="css-r8ywg3 eaa55an1"
            >
              <SlideWrapper
                align="center center"
                dispatch={[Function]}
                export={false}
                fragments={
                  Object {
                    "fragments": Array [],
                  }
                }
                hash={0}
                key=".$0"
                lastSlideIndex={0}
                presenterStyle={Object {}}
                print={false}
                slideIndex={0}
                slideReference={
                  Array [
                    Object {
                      "id": 0,
                      "rootIndex": 0,
                    },
                    Object {
                      "id": 1,
                      "rootIndex": 1,
                    },
                  ]
                }
                style={Object {}}
                transition={
                  Array [
                    "zoom",
                    "slide",
                  ]
                }
                transitionDuration={500}
                viewerScaleMode={false}
              >
                <VictoryAnimation
                  data={
                    Object {
                      "transform": " scale(1) translate3d(0%, 0, 0)",
                      "zIndex": 1,
                    }
                  }
                  delay={0}
                  duration={500}
                  easing="quadInOut"
                >
                  <div
                    style={
                      Object {
                        "backgroundColor": "",
                        "display": "flex",
                        "height": "100%",
                        "left": 0,
                        "overflow": "hidden",
                        "position": "absolute",
                        "top": 0,
                        "transform": " scale(0.1) translate3d(-100%, 0, 0)",
                        "transformOrigin": "center center",
                        "width": "100%",
                        "zIndex": 1,
                      }
                    }
                  >
                    <MockSlide
                      dispatch={[Function]}
                      export={false}
                      fragments={
                        Object {
                          "fragments": Array [],
                        }
                      }
                      hash={0}
                      key=".0"
                      lastSlideIndex={0}
                      print={false}
                      slideIndex={0}
                      slideReference={
                        Array [
                          Object {
                            "id": 0,
                            "rootIndex": 0,
                          },
                          Object {
                            "id": 1,
                            "rootIndex": 1,
                          },
                        ]
                      }
                      transition={
                        Array [
                          "zoom",
                          "slide",
                        ]
                      }
                      transitionDuration={500}
                    >
                      <div>
                        Slide Content
                      </div>
                    </MockSlide>
                  </div>
                </VictoryAnimation>
              </SlideWrapper>
            </div>
          </TransitionGroup>
        </Styled(TransitionGroup)>
        <Progress
          currentSlideIndex={0}
          items={
            Array [
              Object {
                "id": 0,
                "rootIndex": 0,
              },
              Object {
                "id": 1,
                "rootIndex": 1,
              },
            ]
          }
          progressColor={null}
          type="pacman"
        >
          <Styled(div)
            styles={
              Array [
                undefined,
                null,
              ]
            }
          >
            <div
              className="css-0 e12weced4"
            >
              <div>
                <Styled(div)
                  position={
                    Object {
                      "left": "-15px",
                      "top": "-20px",
                    }
                  }
                >
                  <div
                    className="css-ro10dn e12weced0"
                  >
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-vwhb3c 0.12s linear 10 alternate both",
                          },
                          null,
                        ]
                      }
                    >
                      <div
                        className="css-1la23zo e12weced1"
                      />
                    </Styled(div)>
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-1p18wsg 0.12s linear 10 alternate both",
                          },
                          null,
                        ]
                      }
                    >
                      <div
                        className="css-1yi33k2 e12weced1"
                      />
                    </Styled(div)>
                  </div>
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-0"
                  position={
                    Object {
                      "left": "-15px",
                      "opacity": 0,
                      "top": "-20px",
                    }
                  }
                  styles={
                    Array [
                      undefined,
                      null,
                    ]
                  }
                >
                  <div
                    className="css-16u37i9 e12weced2"
                  />
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-1"
                  position={
                    Object {
                      "left": "5px",
                      "top": "-20px",
                    }
                  }
                  styles={
                    Array [
                      undefined,
                      null,
                    ]
                  }
                >
                  <div
                    className="css-1qz1mlg e12weced2"
                  />
                </Styled(div)>
              </div>
            </div>
          </Styled(div)>
        </Progress>
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body { } .spectacle-presenter-next .fragment { display: none !important} ",
            }
          }
        />
      </div>
    </Styled(div)>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render fullscreen button dependant on prop 1`] = `
<Connect(Manager)
  showFullscreenControl={true}
>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    autoplayLoop={true}
    autoplayOnStart={true}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    disableKeyboardControls={false}
    disableTouchControls={false}
    dispatch={[Function]}
    fragment={
      Object {
        "fragments": Array [],
      }
    }
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [],
        "slide": 0,
      }
    }
    showFullscreenControl={true}
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <Styled(div)
      className="spectacle-deck"
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      route={
        Object {
          "params": Array [],
          "slide": 0,
        }
      }
    >
      <div
        className="spectacle-deck css-1w702dy eaa55an0"
        onClick={[Function]}
        onTouchCancel={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
      >
        <Controls
          controlColor={null}
          currentSlideIndex={0}
          onNext={[Function]}
          onPrev={[Function]}
          totalSlides={1}
        >
          <div />
        </Controls>
        <Styled(TransitionGroup)
          component="div"
        >
          <TransitionGroup
            childFactory={[Function]}
            className="css-r8ywg3 eaa55an1"
            component="div"
          >
            <div
              className="css-r8ywg3 eaa55an1"
            >
              <SlideWrapper
                align="center center"
                dispatch={[Function]}
                export={false}
                fragments={
                  Object {
                    "fragments": Array [],
                  }
                }
                hash={0}
                key=".$0"
                lastSlideIndex={0}
                presenterStyle={Object {}}
                print={false}
                slideIndex={0}
                slideReference={
                  Array [
                    Object {
                      "id": 0,
                      "rootIndex": 0,
                    },
                  ]
                }
                style={Object {}}
                transition={Array []}
                transitionDuration={500}
                viewerScaleMode={false}
              >
                <VictoryAnimation
                  data={
                    Object {
                      "transform": " translate3d(0px, 0px, 0px)",
                      "zIndex": 1,
                    }
                  }
                  delay={0}
                  duration={500}
                  easing="quadInOut"
                >
                  <div
                    style={
                      Object {
                        "backgroundColor": "",
                        "display": "flex",
                        "height": "100%",
                        "left": 0,
                        "overflow": "hidden",
                        "position": "absolute",
                        "top": 0,
                        "transform": " translate3d(0px, 0px, 0px)",
                        "transformOrigin": "center center",
                        "width": "100%",
                        "zIndex": 1,
                      }
                    }
                  >
                    <MockSlide
                      dispatch={[Function]}
                      export={false}
                      fragments={
                        Object {
                          "fragments": Array [],
                        }
                      }
                      hash={0}
                      key=".0"
                      lastSlideIndex={0}
                      print={false}
                      slideIndex={0}
                      slideReference={
                        Array [
                          Object {
                            "id": 0,
                            "rootIndex": 0,
                          },
                        ]
                      }
                      transition={Array []}
                      transitionDuration={500}
                    >
                      <div>
                        Slide Content
                      </div>
                    </MockSlide>
                  </div>
                </VictoryAnimation>
              </SlideWrapper>
            </div>
          </TransitionGroup>
        </Styled(TransitionGroup)>
        <Progress
          currentSlideIndex={0}
          items={
            Array [
              Object {
                "id": 0,
                "rootIndex": 0,
              },
            ]
          }
          progressColor={null}
          type="pacman"
        >
          <Styled(div)
            styles={
              Array [
                undefined,
                null,
              ]
            }
          >
            <div
              className="css-0 e12weced4"
            >
              <div>
                <Styled(div)
                  position={
                    Object {
                      "left": "-5px",
                      "top": "-20px",
                    }
                  }
                >
                  <div
                    className="css-p4obic e12weced0"
                  >
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-vwhb3c 0.12s linear 10 alternate both",
                          },
                          null,
                        ]
                      }
                    >
                      <div
                        className="css-1la23zo e12weced1"
                      />
                    </Styled(div)>
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-1p18wsg 0.12s linear 10 alternate both",
                          },
                          null,
                        ]
                      }
                    >
                      <div
                        className="css-1yi33k2 e12weced1"
                      />
                    </Styled(div)>
                  </div>
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-0"
                  position={
                    Object {
                      "left": "-5px",
                      "opacity": 0,
                      "top": "-20px",
                    }
                  }
                  styles={
                    Array [
                      undefined,
                      null,
                    ]
                  }
                >
                  <div
                    className="css-ci3gz3 e12weced2"
                  />
                </Styled(div)>
              </div>
            </div>
          </Styled(div)>
        </Progress>
        <Fullscreen
          onClick={[Function]}
        >
          <Styled(FullscreenButton)
            isFullscreen={false}
            onClick={[Function]}
          >
            <FullscreenButton
              className="css-12w3q3u e4v3eea0"
              isFullscreen={false}
              onClick={[Function]}
            >
              <Styled(button)
                aria-label="Toggle full screen"
                className="css-12w3q3u e4v3eea0"
                onClick={[Function]}
              >
                <button
                  aria-label="Toggle full screen"
                  className="e4v3eea0 css-11lfetj ev51h780"
                  onClick={[Function]}
                >
                  <svg
                    viewBox="0 0 512 512"
                  >
                    <path
                      d="M396.795 396.8H320V448h128V320h-51.205zM396.8 115.205V192H448V64H320v51.205zM115.205 115.2H192V64H64v128h51.205zM115.2 396.795V320H64v128h128v-51.205z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </Styled(button)>
            </FullscreenButton>
          </Styled(FullscreenButton)>
        </Fullscreen>
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body { } .spectacle-presenter-next .fragment { display: none !important} ",
            }
          }
        />
      </div>
    </Styled(div)>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render the export configuration when specified. 1`] = `
<Connect(Manager)>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    autoplayLoop={true}
    autoplayOnStart={true}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    disableKeyboardControls={false}
    disableTouchControls={false}
    dispatch={[Function]}
    fragment={
      Object {
        "fragments": Array [],
      }
    }
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [
          "export",
        ],
        "slide": 0,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <Styled(div)
      className="spectacle-deck"
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      route={
        Object {
          "params": Array [
            "export",
          ],
          "slide": 0,
        }
      }
    >
      <div
        className="spectacle-deck css-1w702dy eaa55an0"
        onClick={[Function]}
        onTouchCancel={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
      >
        <Export
          route={
            Object {
              "params": Array [
                "export",
              ],
              "slide": 0,
            }
          }
          slideReference={
            Array [
              Object {
                "id": 0,
                "rootIndex": 0,
              },
              Object {
                "id": 1,
                "rootIndex": 1,
              },
            ]
          }
          slides={
            Array [
              <MockSlide />,
              <MockSlide />,
            ]
          }
        >
          <Styled(div)>
            <div
              className="css-v2kfba ei5jtoh0"
            >
              <MockSlide
                export={true}
                key="0"
                print={false}
                slideIndex={0}
                transition={Array []}
                transitionDuration={0}
                transitionIn={Array []}
                transitionOut={Array []}
              >
                <div>
                  Slide Content
                </div>
              </MockSlide>
              <MockSlide
                export={true}
                key="1"
                print={false}
                slideIndex={1}
                transition={Array []}
                transitionDuration={0}
                transitionIn={Array []}
                transitionOut={Array []}
              >
                <div>
                  Slide Content
                </div>
              </MockSlide>
            </div>
          </Styled(div)>
        </Export>
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body { min-width: 1150px; min-height: 850px; overflow: auto} .spectacle-presenter-next .fragment { display: none !important} ",
            }
          }
        />
      </div>
    </Styled(div)>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render the overview configuration when specified. 1`] = `
<Connect(Manager)>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    autoplayLoop={true}
    autoplayOnStart={true}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    disableKeyboardControls={false}
    disableTouchControls={false}
    dispatch={[Function]}
    fragment={
      Object {
        "fragments": Array [],
      }
    }
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [
          "overview",
        ],
        "slide": 0,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <Styled(div)
      className="spectacle-deck"
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      route={
        Object {
          "params": Array [
            "overview",
          ],
          "slide": 0,
        }
      }
    >
      <div
        className="spectacle-deck css-1pplrs6 eaa55an0"
        onClick={[Function]}
        onTouchCancel={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
      >
        <Overview
          resetViewedIndexes={[Function]}
          route={
            Object {
              "params": Array [
                "overview",
              ],
              "slide": 0,
            }
          }
          slideIndex={0}
          slideReference={
            Array [
              Object {
                "id": 0,
                "rootIndex": 0,
              },
              Object {
                "id": 1,
                "rootIndex": 1,
              },
            ]
          }
          slides={
            Array [
              <MockSlide />,
              <MockSlide />,
            ]
          }
        >
          <Styled(div)>
            <div
              className="css-gv2ckq euot5m50"
            >
              <Styled(div)
                index={0}
                key="0"
                onClick={[Function]}
                screen={0}
                slideIndex={0}
              >
                <div
                  className="css-13mtebb euot5m51"
                  onClick={[Function]}
                >
                  <MockSlide
                    appearOff={true}
                    export={false}
                    key="0"
                    print={false}
                    slideIndex={0}
                    transition={Array []}
                    transitionDuration={0}
                  >
                    <div>
                      Slide Content
                    </div>
                  </MockSlide>
                </div>
              </Styled(div)>
              <Styled(div)
                index={1}
                key="1"
                onClick={[Function]}
                screen={0}
                slideIndex={0}
              >
                <div
                  className="css-13d6elb euot5m51"
                  onClick={[Function]}
                >
                  <MockSlide
                    appearOff={true}
                    export={false}
                    key="1"
                    print={false}
                    slideIndex={1}
                    transition={Array []}
                    transitionDuration={0}
                  >
                    <div>
                      Slide Content
                    </div>
                  </MockSlide>
                </div>
              </Styled(div)>
            </div>
          </Styled(div)>
        </Overview>
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body { } .spectacle-presenter-next .fragment { display: none !important} ",
            }
          }
        />
      </div>
    </Styled(div)>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render with slideset slides 1`] = `
<Connect(Manager)>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    autoplayLoop={true}
    autoplayOnStart={true}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    disableKeyboardControls={false}
    disableTouchControls={false}
    dispatch={[Function]}
    fragment={
      Object {
        "fragments": Array [],
      }
    }
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [],
        "slide": 1,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <Styled(div)
      className="spectacle-deck"
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      route={
        Object {
          "params": Array [],
          "slide": 1,
        }
      }
    >
      <div
        className="spectacle-deck css-1w702dy eaa55an0"
        onClick={[Function]}
        onTouchCancel={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
      >
        <Controls
          controlColor={null}
          currentSlideIndex={1}
          onNext={[Function]}
          onPrev={[Function]}
          totalSlides={3}
        >
          <div>
            <button
              aria-label="Previous slide"
              key="prev"
              onClick={[Function]}
              type="button"
            >
              <svg
                focusable="false"
                height="32px"
                key="prevIcon"
                role="presentation"
                viewBox="0 0 512 828.586"
                width="32px"
              >
                <path
                  d="M512,97.707L414.293,0L0,414.293l414.293,414.293L512,730.88L195.414,414.293L512,97.707z"
                />
              </svg>
            </button>
            <button
              aria-label="Next slide"
              key="next"
              onClick={[Function]}
              type="button"
            >
              <svg
                focusable="false"
                height="32px"
                key="nextIcon"
                role="presentation"
                viewBox="0 0 512 828.586"
                width="32px"
              >
                <path
                  d="M97.707,0L0,97.707l316.586,316.586L0,730.88l97.707,97.706L512,414.293L97.707,0z"
                />
              </svg>
            </button>
          </div>
        </Controls>
        <Styled(TransitionGroup)
          component="div"
        >
          <TransitionGroup
            childFactory={[Function]}
            className="css-r8ywg3 eaa55an1"
            component="div"
          >
            <div
              className="css-r8ywg3 eaa55an1"
            >
              <SlideWrapper
                align="center center"
                dispatch={[Function]}
                export={false}
                fragments={
                  Object {
                    "fragments": Array [],
                  }
                }
                hash={1}
                key=".$1"
                lastSlideIndex={1}
                presenterStyle={Object {}}
                print={false}
                slideIndex={1}
                slideReference={
                  Array [
                    Object {
                      "id": 0,
                      "rootIndex": 0,
                    },
                    Object {
                      "id": 1,
                      "rootIndex": 1,
                      "setIndex": 0,
                    },
                    Object {
                      "id": 2,
                      "rootIndex": 1,
                      "setIndex": 1,
                    },
                  ]
                }
                style={Object {}}
                transition={Array []}
                transitionDuration={500}
                viewerScaleMode={false}
              >
                <VictoryAnimation
                  data={
                    Object {
                      "transform": " translate3d(0px, 0px, 0px)",
                      "zIndex": 1,
                    }
                  }
                  delay={0}
                  duration={500}
                  easing="quadInOut"
                >
                  <div
                    style={
                      Object {
                        "backgroundColor": "",
                        "display": "flex",
                        "height": "100%",
                        "left": 0,
                        "overflow": "hidden",
                        "position": "absolute",
                        "top": 0,
                        "transform": " translate3d(0px, 0px, 0px)",
                        "transformOrigin": "center center",
                        "width": "100%",
                        "zIndex": 1,
                      }
                    }
                  >
                    <MockSlide
                      dispatch={[Function]}
                      export={false}
                      fragments={
                        Object {
                          "fragments": Array [],
                        }
                      }
                      hash={1}
                      key=".0"
                      lastSlideIndex={1}
                      print={false}
                      slideIndex={1}
                      slideReference={
                        Array [
                          Object {
                            "id": 0,
                            "rootIndex": 0,
                          },
                          Object {
                            "id": 1,
                            "rootIndex": 1,
                            "setIndex": 0,
                          },
                          Object {
                            "id": 2,
                            "rootIndex": 1,
                            "setIndex": 1,
                          },
                        ]
                      }
                      transition={Array []}
                      transitionDuration={500}
                    >
                      <div>
                        Slide Content
                      </div>
                    </MockSlide>
                  </div>
                </VictoryAnimation>
              </SlideWrapper>
            </div>
          </TransitionGroup>
        </Styled(TransitionGroup)>
        <Progress
          currentSlideIndex={1}
          items={
            Array [
              Object {
                "id": 0,
                "rootIndex": 0,
              },
              Object {
                "id": 1,
                "rootIndex": 1,
                "setIndex": 0,
              },
              Object {
                "id": 2,
                "rootIndex": 1,
                "setIndex": 1,
              },
            ]
          }
          progressColor={null}
          type="pacman"
        >
          <Styled(div)
            styles={
              Array [
                undefined,
                null,
              ]
            }
          >
            <div
              className="css-0 e12weced4"
            >
              <div>
                <Styled(div)
                  position={
                    Object {
                      "left": "-5px",
                      "top": "-20px",
                    }
                  }
                >
                  <div
                    className="css-p4obic e12weced0"
                  >
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-v6s9vi 0.12s linear 10 alternate both",
                          },
                          null,
                        ]
                      }
                    >
                      <div
                        className="css-172vklz e12weced1"
                      />
                    </Styled(div)>
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-9hbgqx 0.12s linear 10 alternate both",
                          },
                          null,
                        ]
                      }
                    >
                      <div
                        className="css-5id854 e12weced1"
                      />
                    </Styled(div)>
                  </div>
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-0"
                  position={
                    Object {
                      "left": "-25px",
                      "opacity": 0,
                      "top": "-20px",
                    }
                  }
                  styles={
                    Array [
                      undefined,
                      null,
                    ]
                  }
                >
                  <div
                    className="css-1xucvt e12weced2"
                  />
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-1"
                  position={
                    Object {
                      "left": "-5px",
                      "opacity": 0,
                      "top": "-20px",
                    }
                  }
                  styles={
                    Array [
                      undefined,
                      null,
                    ]
                  }
                >
                  <div
                    className="css-ci3gz3 e12weced2"
                  />
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-2"
                  position={
                    Object {
                      "left": "15px",
                      "top": "-20px",
                    }
                  }
                  styles={
                    Array [
                      undefined,
                      null,
                    ]
                  }
                >
                  <div
                    className="css-tyaqbb e12weced2"
                  />
                </Styled(div)>
              </div>
            </div>
          </Styled(div)>
        </Progress>
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body { } .spectacle-presenter-next .fragment { display: none !important} ",
            }
          }
        />
      </div>
    </Styled(div)>
  </Manager>
</Connect(Manager)>
`;
