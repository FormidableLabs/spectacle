// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Manager /> should render correctly. 1`] = `
<Connect(Manager)
  transition={
    Array [
      "zoom",
      "slide",
    ]
  }
  transitionDuration={500}
>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    dispatch={[Function]}
    fragment={
      Object {
        "fragments": Array [],
      }
    }
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [],
        "slide": 0,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={
      Array [
        "zoom",
        "slide",
      ]
    }
    transitionDuration={500}
  >
    <Styled(div)
      className="spectacle-deck"
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      route={
        Object {
          "params": Array [],
          "slide": 0,
        }
      }
    >
      <div
        className="spectacle-deck css-1w702dy"
        onClick={[Function]}
        onTouchCancel={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
      >
        <Controls
          currentSlideIndex={0}
          onNext={[Function]}
          onPrev={[Function]}
          totalSlides={2}
        >
          <div>
            <button
              key="next"
              onClick={[Function]}
              style={undefined}
              type="button"
            >
              <svg
                height="32px"
                key="nextIcon"
                style={undefined}
                viewBox="0 0 512 828.586"
                width="32px"
              >
                <path
                  d="M97.707,0L0,97.707l316.586,316.586L0,730.88l97.707,97.706L512,414.293L97.707,0z"
                />
              </svg>
            </button>
          </div>
        </Controls>
        <Styled(TransitionGroup)
          component="div"
        >
          <TransitionGroup
            childFactory={[Function]}
            className="css-r8ywg3"
            component="div"
          >
            <div
              className="css-r8ywg3"
            >
              <MockSlide
                dispatch={[Function]}
                export={false}
                fragments={
                  Object {
                    "fragments": Array [],
                  }
                }
                hash={0}
                key=".$0"
                lastSlideIndex={0}
                print={false}
                slideIndex={0}
                slideReference={
                  Array [
                    Object {
                      "id": 0,
                      "rootIndex": 0,
                    },
                    Object {
                      "id": 1,
                      "rootIndex": 1,
                    },
                  ]
                }
                transition={
                  Array [
                    "zoom",
                    "slide",
                  ]
                }
                transitionDuration={500}
              >
                <div>
                  Slide Content
                </div>
              </MockSlide>
            </div>
          </TransitionGroup>
        </Styled(TransitionGroup)>
        <Progress
          currentSlideIndex={0}
          items={
            Array [
              Object {
                "id": 0,
                "rootIndex": 0,
              },
              Object {
                "id": 1,
                "rootIndex": 1,
              },
            ]
          }
          type="pacman"
        >
          <Styled(div)
            styles={undefined}
          >
            <div
              className="css-0"
            >
              <div>
                <Styled(div)
                  position={
                    Object {
                      "left": "-15px",
                      "top": "-20px",
                    }
                  }
                  styles={undefined}
                >
                  <div
                    className="css-ro10dn"
                  >
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-vwhb3c 0.12s linear 10 alternate both",
                          },
                        ]
                      }
                    >
                      <div
                        className="css-1la23zo"
                      />
                    </Styled(div)>
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-1p18wsg 0.12s linear 10 alternate both",
                          },
                        ]
                      }
                    >
                      <div
                        className="css-1yi33k2"
                      />
                    </Styled(div)>
                  </div>
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-0"
                  position={
                    Object {
                      "left": "-15px",
                      "opacity": 0,
                      "top": "-20px",
                    }
                  }
                  styles={undefined}
                >
                  <div
                    className="css-16u37i9"
                  />
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-1"
                  position={
                    Object {
                      "left": "5px",
                      "top": "-20px",
                    }
                  }
                  styles={undefined}
                >
                  <div
                    className="css-1qz1mlg"
                  />
                </Styled(div)>
              </div>
            </div>
          </Styled(div)>
        </Progress>
        <Fullscreen>
          <Styled(FullscreenButton)
            onClick={[Function]}
            style={undefined}
            viewBox="0 0 512 512"
          >
            <FullscreenButton
              className="css-12n5ud"
              onClick={[Function]}
              style={undefined}
              viewBox="0 0 512 512"
            >
              <Styled(button)
                className="css-12n5ud"
                onClick={[Function]}
                style={undefined}
                viewBox="0 0 512 512"
              >
                <button
                  className="css-1hv29sw"
                  onClick={[Function]}
                  style={undefined}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                    <path
                      d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </Styled(button)>
            </FullscreenButton>
          </Styled(FullscreenButton)>
        </Fullscreen>
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body { } .spectacle-presenter-next .fragment { display: none !important} ",
            }
          }
        />
      </div>
    </Styled(div)>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render the export configuration when specified. 1`] = `
<Connect(Manager)>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    dispatch={[Function]}
    fragment={
      Object {
        "fragments": Array [],
      }
    }
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [
          "export",
        ],
        "slide": 0,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <Styled(div)
      className="spectacle-deck"
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      route={
        Object {
          "params": Array [
            "export",
          ],
          "slide": 0,
        }
      }
    >
      <div
        className="spectacle-deck css-1w702dy"
        onClick={[Function]}
        onTouchCancel={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
      >
        <Export
          route={
            Object {
              "params": Array [
                "export",
              ],
              "slide": 0,
            }
          }
          slideReference={
            Array [
              Object {
                "id": 0,
                "rootIndex": 0,
              },
              Object {
                "id": 1,
                "rootIndex": 1,
              },
            ]
          }
          slides={
            Array [
              <MockSlide />,
              <MockSlide />,
            ]
          }
        >
          <Styled(div)>
            <div
              className="css-v2kfba"
            >
              <MockSlide
                export={true}
                key="0"
                print={false}
                slideIndex={0}
                transition={Array []}
                transitionDuration={0}
                transitionIn={Array []}
                transitionOut={Array []}
              >
                <div>
                  Slide Content
                </div>
              </MockSlide>
              <MockSlide
                export={true}
                key="1"
                print={false}
                slideIndex={1}
                transition={Array []}
                transitionDuration={0}
                transitionIn={Array []}
                transitionOut={Array []}
              >
                <div>
                  Slide Content
                </div>
              </MockSlide>
            </div>
          </Styled(div)>
        </Export>
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body { min-width: 1150px; min-height: 850px; overflow: auto} .spectacle-presenter-next .fragment { display: none !important} ",
            }
          }
        />
      </div>
    </Styled(div)>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render the overview configuration when specified. 1`] = `
<Connect(Manager)>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    dispatch={[Function]}
    fragment={
      Object {
        "fragments": Array [],
      }
    }
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [
          "overview",
        ],
        "slide": 0,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <Styled(div)
      className="spectacle-deck"
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      route={
        Object {
          "params": Array [
            "overview",
          ],
          "slide": 0,
        }
      }
    >
      <div
        className="spectacle-deck css-1pplrs6"
        onClick={[Function]}
        onTouchCancel={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
      >
        <Overview
          route={
            Object {
              "params": Array [
                "overview",
              ],
              "slide": 0,
            }
          }
          slideIndex={0}
          slideReference={
            Array [
              Object {
                "id": 0,
                "rootIndex": 0,
              },
              Object {
                "id": 1,
                "rootIndex": 1,
              },
            ]
          }
          slides={
            Array [
              <MockSlide />,
              <MockSlide />,
            ]
          }
        >
          <Styled(div)>
            <div
              className="css-gv2ckq"
            >
              <Styled(div)
                index={0}
                key="0"
                onClick={[Function]}
                screen={0}
                slideIndex={0}
              >
                <div
                  className="css-13mtebb"
                  onClick={[Function]}
                >
                  <MockSlide
                    appearOff={true}
                    export={false}
                    key="0"
                    print={false}
                    slideIndex={0}
                    transition={Array []}
                    transitionDuration={0}
                  >
                    <div>
                      Slide Content
                    </div>
                  </MockSlide>
                </div>
              </Styled(div)>
              <Styled(div)
                index={1}
                key="1"
                onClick={[Function]}
                screen={0}
                slideIndex={0}
              >
                <div
                  className="css-13d6elb"
                  onClick={[Function]}
                >
                  <MockSlide
                    appearOff={true}
                    export={false}
                    key="1"
                    print={false}
                    slideIndex={1}
                    transition={Array []}
                    transitionDuration={0}
                  >
                    <div>
                      Slide Content
                    </div>
                  </MockSlide>
                </div>
              </Styled(div)>
            </div>
          </Styled(div)>
        </Overview>
        <Fullscreen>
          <Styled(FullscreenButton)
            onClick={[Function]}
            style={undefined}
            viewBox="0 0 512 512"
          >
            <FullscreenButton
              className="css-12n5ud"
              onClick={[Function]}
              style={undefined}
              viewBox="0 0 512 512"
            >
              <Styled(button)
                className="css-12n5ud"
                onClick={[Function]}
                style={undefined}
                viewBox="0 0 512 512"
              >
                <button
                  className="css-1hv29sw"
                  onClick={[Function]}
                  style={undefined}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                    <path
                      d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </Styled(button)>
            </FullscreenButton>
          </Styled(FullscreenButton)>
        </Fullscreen>
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body { } .spectacle-presenter-next .fragment { display: none !important} ",
            }
          }
        />
      </div>
    </Styled(div)>
  </Manager>
</Connect(Manager)>
`;

exports[`<Manager /> should render with slideset slides 1`] = `
<Connect(Manager)>
  <Manager
    autoplay={false}
    autoplayDuration={7000}
    contentHeight={700}
    contentWidth={1000}
    controls={true}
    dispatch={[Function]}
    fragment={
      Object {
        "fragments": Array [],
      }
    }
    globalStyles={true}
    progress="pacman"
    route={
      Object {
        "params": Array [],
        "slide": 1,
      }
    }
    style={
      Object {
        "globalStyleSet": Array [],
      }
    }
    transition={Array []}
    transitionDuration={500}
  >
    <Styled(div)
      className="spectacle-deck"
      onClick={[Function]}
      onTouchCancel={[Function]}
      onTouchEnd={[Function]}
      onTouchMove={[Function]}
      onTouchStart={[Function]}
      route={
        Object {
          "params": Array [],
          "slide": 1,
        }
      }
    >
      <div
        className="spectacle-deck css-1w702dy"
        onClick={[Function]}
        onTouchCancel={[Function]}
        onTouchEnd={[Function]}
        onTouchMove={[Function]}
        onTouchStart={[Function]}
      >
        <Controls
          currentSlideIndex={1}
          onNext={[Function]}
          onPrev={[Function]}
          totalSlides={3}
        >
          <div>
            <button
              key="prev"
              onClick={[Function]}
              style={undefined}
              type="button"
            >
              <svg
                height="32px"
                key="prevIcon"
                style={undefined}
                viewBox="0 0 512 828.586"
                width="32px"
              >
                <path
                  d="M512,97.707L414.293,0L0,414.293l414.293,414.293L512,730.88L195.414,414.293L512,97.707z"
                />
              </svg>
            </button>
            <button
              key="next"
              onClick={[Function]}
              style={undefined}
              type="button"
            >
              <svg
                height="32px"
                key="nextIcon"
                style={undefined}
                viewBox="0 0 512 828.586"
                width="32px"
              >
                <path
                  d="M97.707,0L0,97.707l316.586,316.586L0,730.88l97.707,97.706L512,414.293L97.707,0z"
                />
              </svg>
            </button>
          </div>
        </Controls>
        <Styled(TransitionGroup)
          component="div"
        >
          <TransitionGroup
            childFactory={[Function]}
            className="css-r8ywg3"
            component="div"
          >
            <div
              className="css-r8ywg3"
            >
              <MockSlide
                dispatch={[Function]}
                export={false}
                fragments={
                  Object {
                    "fragments": Array [],
                  }
                }
                hash={1}
                key=".$1"
                lastSlideIndex={1}
                print={false}
                slideIndex={1}
                slideReference={
                  Array [
                    Object {
                      "id": 0,
                      "rootIndex": 0,
                    },
                    Object {
                      "id": 1,
                      "rootIndex": 1,
                      "setIndex": 0,
                    },
                    Object {
                      "id": 2,
                      "rootIndex": 1,
                      "setIndex": 1,
                    },
                  ]
                }
                transition={Array []}
                transitionDuration={500}
              >
                <div>
                  Slide Content
                </div>
              </MockSlide>
            </div>
          </TransitionGroup>
        </Styled(TransitionGroup)>
        <Progress
          currentSlideIndex={1}
          items={
            Array [
              Object {
                "id": 0,
                "rootIndex": 0,
              },
              Object {
                "id": 1,
                "rootIndex": 1,
                "setIndex": 0,
              },
              Object {
                "id": 2,
                "rootIndex": 1,
                "setIndex": 1,
              },
            ]
          }
          type="pacman"
        >
          <Styled(div)
            styles={undefined}
          >
            <div
              className="css-0"
            >
              <div>
                <Styled(div)
                  position={
                    Object {
                      "left": "-5px",
                      "top": "-20px",
                    }
                  }
                  styles={undefined}
                >
                  <div
                    className="css-p4obic"
                  >
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-v6s9vi 0.12s linear 10 alternate both",
                          },
                        ]
                      }
                    >
                      <div
                        className="css-172vklz"
                      />
                    </Styled(div)>
                    <Styled(div)
                      styles={
                        Array [
                          undefined,
                          Object {
                            "animation": "animation-9hbgqx 0.12s linear 10 alternate both",
                          },
                        ]
                      }
                    >
                      <div
                        className="css-5id854"
                      />
                    </Styled(div)>
                  </div>
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-0"
                  position={
                    Object {
                      "left": "-25px",
                      "opacity": 0,
                      "top": "-20px",
                    }
                  }
                  styles={undefined}
                >
                  <div
                    className="css-1xucvt"
                  />
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-1"
                  position={
                    Object {
                      "left": "-5px",
                      "opacity": 0,
                      "top": "-20px",
                    }
                  }
                  styles={undefined}
                >
                  <div
                    className="css-ci3gz3"
                  />
                </Styled(div)>
                <Styled(div)
                  key="presentation-progress-2"
                  position={
                    Object {
                      "left": "15px",
                      "top": "-20px",
                    }
                  }
                  styles={undefined}
                >
                  <div
                    className="css-tyaqbb"
                  />
                </Styled(div)>
              </div>
            </div>
          </Styled(div)>
        </Progress>
        <Fullscreen>
          <Styled(FullscreenButton)
            onClick={[Function]}
            style={undefined}
            viewBox="0 0 512 512"
          >
            <FullscreenButton
              className="css-12n5ud"
              onClick={[Function]}
              style={undefined}
              viewBox="0 0 512 512"
            >
              <Styled(button)
                className="css-12n5ud"
                onClick={[Function]}
                style={undefined}
                viewBox="0 0 512 512"
              >
                <button
                  className="css-1hv29sw"
                  onClick={[Function]}
                  style={undefined}
                >
                  <svg
                    viewBox="0 0 24 24"
                  >
                    <path
                      d="M0 0h24v24H0z"
                      fill="none"
                    />
                    <path
                      d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"
                      fill="currentColor"
                    />
                  </svg>
                </button>
              </Styled(button)>
            </FullscreenButton>
          </Styled(FullscreenButton)>
        </Fullscreen>
        <style
          dangerouslySetInnerHTML={
            Object {
              "__html": "body { } .spectacle-presenter-next .fragment { display: none !important} ",
            }
          }
        />
      </div>
    </Styled(div)>
  </Manager>
</Connect(Manager)>
`;
